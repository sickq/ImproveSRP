#pragma kernel CSIntergalCPDensity

// IntegrateInscattering
// P - current integration point
// A - camera position
// C - top of the atmosphere

#include "ShaderLibrary/ASMath.hlsl"
#include "ShaderLibrary/InScattering.hlsl"

#define SAMPLECOUNT_DENSITY 256

// CP Particle Density
RWTexture2D<float2> _RWintegralCPDensityLUT;

// =================================================================================
// PreComputeDensity
// =================================================================================
float2 ComputeDensity(float3 rayStart, float3 rayDir)
{
    float3 planetCenter = float3(0, -_PlanetRadius, 0);
    
    float stepCount = SAMPLECOUNT_DENSITY;
    
    float2 intersection = RaySphereIntersection(rayStart, rayDir, planetCenter, _PlanetRadius);
    if (intersection.x > 0)
    {
        // intersection with planet, write high density
        return 1 * pow(10, 20);
    }
    
    intersection = RaySphereIntersection(rayStart, rayDir, planetCenter, _PlanetRadius + _AtmosphereHeight);
    float3 rayEnd = rayStart + rayDir * intersection.y;
    
    // compute density along the ray
    float3 step = (rayEnd - rayStart) / stepCount;
    float stepSize = length(step);
    float2 density = 0;
    
    for (float s = 0.5; s < stepCount; s += 1.0)
    {
        float3 position = rayStart + step * s;
        float height = abs(length(position - planetCenter) - _PlanetRadius);
        float2 localDensity = exp( - (height.xx / _DensityScaleHeight));
        
        density += localDensity * stepSize;
    }
    
    return density;
}

[numthreads(8, 8, 1)]
void CSIntergalCPDensity(uint3 id: SV_DispatchThreadID)
{
    int w, h;
    _RWintegralCPDensityLUT.GetDimensions(w, h);
    
    float cosAngle01 = (float)id.x / w;
    float height01 = (float)id.y / h;
    
    float cosAngle = cosAngle01 * 2 - 1;
    float sinAngle = sqrt(saturate(1 - cosAngle * cosAngle));
    float height = lerp(0, _AtmosphereHeight, height01);
    
    float3 rayStart = float3(0, height, 0);
    float3 rayDir = float3(sinAngle, cosAngle, 0);
    
    _RWintegralCPDensityLUT[id.xy] = ComputeDensity(rayStart, rayDir);
}