#pragma kernel CSAmbient

// IntegrateInscattering
// P - current integration point
// A - camera position
// C - top of the atmosphere

#include "Packages/com.unity.render-pipelines.universal/ShaderLibrary/Core.hlsl"
#include "ShaderLibrary/ASInclude.hlsl"

// Ambient
RWTexture2D<float3> _RWambientLUT;
Texture2D<float3> _RWhemiSphereRandomNormlizedVecLUT;

SamplerState _pointClampSampler;

// =================================================================================
// PrecomputeAmbient
// =================================================================================
float3 ComputeAmbient(float cosSunAngle01, int count)
{
    float cosSunAngle = cosSunAngle01 * 2 - 1;
    float sinSunAngle = 1 - sqrt(cosSunAngle * cosSunAngle);
    float3 lightDir = float3(sinSunAngle, cosSunAngle, 0);
    
    float3 total = (float3)0;
    for (int i = 0; i < count; ++ i)
    {            
        float3 viewDir = _RWhemiSphereRandomNormlizedVecLUT.SampleLevel(_pointClampSampler, float2((float)i / count, 0.5), 0.0, 0.0).xyz;
        float cosViewAngle = dot(viewDir,float3(0,1,0));
        
        //float3 extinction;
        // x : viewDir, y: sunDir 
        float3 inScattering = _InScatteringLUT.SampleLevel(_trilinearClampSampler,float2(cosViewAngle * 0.5 + 0.5,cosSunAngle01),0); 
        
        total += cosViewAngle * inScattering;
    }
    //TODO 2 * PI ?
    total = 2 * PI * total/count;
    return total;
}

// x : sunViewAngle01
[numthreads(8, 1, 1)]
void CSAmbient(uint3 id: SV_DispatchThreadID)
{
    int w, h;
    _RWambientLUT.GetDimensions(w,h);
    
    float cosAngle01 = (float)id.x / w;
    //float height01 = (float)id.y / h;
    
    _RWhemiSphereRandomNormlizedVecLUT.GetDimensions(w, h);
    int count = w;
    _RWambientLUT[int2(id.x,0)] = ComputeAmbient(cosAngle01, count);
}